cmake_minimum_required(VERSION 3.10)

project(InterviewCheater)

set(CMAKE_CXX_STANDARD 17)

# Set compiler flags for Windows
if(MSVC)
    add_definitions(-DUNICODE -D_UNICODE)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:WINDOWS")
    # Ensure consistent runtime library settings
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD")
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MDd")
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MD")
elseif(MINGW)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mwindows")
endif()

# Conditionally add include/windows to the include path if building on Windows
if (WIN32)
    include_directories(include/windows)
endif()
# Include directories
include_directories(include)

# Source files
file(GLOB_RECURSE SOURCES
    src/main.cpp
    src/command/*.cpp
    src/input/*.cpp
    src/signal/*.cpp
    src/window/*.cpp
    src/windows/signal/*.cpp
    src/windows/input/*.cpp
    src/windows/window/*.cpp
)

add_executable(InterviewCheater ${SOURCES})

# Link required Windows libraries
target_link_libraries(InterviewCheater PRIVATE gdi32 dwmapi user32)
