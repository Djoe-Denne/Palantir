# Main workflow for building and checking code quality
name: Build

# Trigger the workflow on push and pull request events for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Prevent multiple workflows from running simultaneously on the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global environment variables
env:
  FORCE_COLOR: 1  # Enable colored output in logs
  TERM: xterm-256color  # Terminal type for better formatting

jobs:
  # Code quality checks (formatting and linting) - macOS only
  code-quality:
    name: Code Quality
    runs-on: macos-latest
    
    steps:
    # Step 1: Check out the repository code with full history for PR comparison
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required to get changed files in PRs
    
    # Step 2: Get list of changed files (only in PR)
    - name: Get changed files
      id: changed-files
      if: github.event_name == 'pull_request'
      shell: bash
      run: |
        # Get list of changed C++ files
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.(cpp|hpp|h|cc)$' | tr '\n' ';' || echo "")
        echo "files=${CHANGED_FILES}" >> $GITHUB_OUTPUT
        echo "Changed files: ${CHANGED_FILES}"
    
    # Step 3: Configure CMake in Release mode
    - name: Configure CMake
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" && "${{ steps.changed-files.outputs.files }}" != "" ]]; then
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -DLINT_FILES="${{ steps.changed-files.outputs.files }}" -DWARNING_THRESHOLD=5
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -DWARNING_THRESHOLD=5
        else
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -DWARNING_THRESHOLD=15
        fi
    
    # Step 4: Check code formatting
    - name: Check Format
      id: format
      run: cmake --build ${{github.workspace}}/build --target format-check
    
    # Step 5: Run static analysis with clang-tidy
    - name: Run Lint Check
      id: lint
      continue-on-error: true
      run: cmake --build ${{github.workspace}}/build --target lint-check

    # Step 6: Analyze lint results using CMake target
    - name: Analyze Lint Results
      run: |
        cat ${{github.workspace}}/build/lint-reports/report.txt
        cmake --build ${{github.workspace}}/build --target lint-analyze

  # Build the project on both platforms
  build:
    name: Build-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: code-quality  # Wait for code quality checks to pass
    strategy:
      fail-fast: false  # Don't cancel other platforms if one fails
      matrix:
        os: [windows-latest, macos-latest]
        include:
          # Windows-specific settings
          - os: windows-latest
            artifact_name: InterviewCheater-Windows
            artifact_path: build/Release/InterviewCheater.exe
          # macOS-specific settings
          - os: macos-latest
            artifact_name: InterviewCheater-macOS
            artifact_path: build/InterviewCheater.app
    
    steps:
    # Step 1: Check out the repository code
    - uses: actions/checkout@v4
    
    # Step 2: Configure CMake in Release mode
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release
    
    # Step 3: Build the project
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config Release
    
    # Step 4: Upload the built application as an artifact
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_path }} 