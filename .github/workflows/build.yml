# Main workflow for building and checking code quality
name: Build

# Trigger the workflow on push and pull request events for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Prevent multiple workflows from running simultaneously on the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global environment variables
env:
  FORCE_COLOR: 1  # Enable colored output in logs
  TERM: xterm-256color  # Terminal type for better formatting
  CMAKE_BUILD_DIR: ${{ github.workspace }}/build

jobs:
  setup:
    name: Setup
    runs-on: windows-latest
    outputs:
      changed_files: ${{ steps.changed-files.outputs.files }}
    
    steps:
    # Step 1: Check out the repository code with full history for PR comparison
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required to get changed files in PRs
    
    # Step 2: Get list of changed files (only in PR)
    - name: Get changed files
      id: changed-files
      if: github.event_name == 'pull_request'
      shell: bash
      run: |
        # Get list of changed C++ files
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.(cpp|hpp|h|cc)$' | tr '\n' ';' || echo "")
        echo "files=${CHANGED_FILES}" >> $GITHUB_OUTPUT
        echo "Changed files: ${CHANGED_FILES}"
    
    # Cache CMake configuration
    - name: Cache CMake files
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.CMAKE_BUILD_DIR }}
          ${{ env.CMAKE_BUILD_DIR }}/CMakeCache.txt
          ${{ env.CMAKE_BUILD_DIR }}/CMakeFiles
        key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: ${{ runner.os }}-cmake-
    
    # Step 3: Configure CMake in Release mode
    - name: Configure CMake
      env:
        GITHUB_TOKEN: ${{ secrets.PALANTIR_GHA }}
      run: |
        $buildDir = "${{ env.CMAKE_BUILD_DIR }}"
        New-Item -ItemType Directory -Path $buildDir -Force | Out-Null

        if ("${{ github.event_name }}" -eq "pull_request" -and "${{ steps.changed-files.outputs.files }}" -ne "") {
          cmake -B $buildDir -DCMAKE_BUILD_TYPE=Release -DLINT_FILES="${{ steps.changed-files.outputs.files }}" -DGITHUB_TOKEN=${{ secrets.PALANTIR_GHA }}
        } else {
          cmake -B $buildDir -DCMAKE_BUILD_TYPE=Release -DGITHUB_TOKEN=${{ secrets.PALANTIR_GHA }}
        }
          
  # Code quality checks (formatting and linting) - macOS only
  code-quality:
    name: Code Quality
    needs: setup
    runs-on: windows-latest
    
    steps:
    # Step 1: Check out the repository code
    - uses: actions/checkout@v4
    
    # Restore CMake configuration from cache
    - name: Restore CMake cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.CMAKE_BUILD_DIR }}
          ${{ env.CMAKE_BUILD_DIR }}/CMakeCache.txt
          ${{ env.CMAKE_BUILD_DIR }}/CMakeFiles
        key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: ${{ runner.os }}-cmake-
    
    # Step 3: Check code formatting
    - name: Check Format
      id: format
      continue-on-error: true
      run: cmake --build ${{ env.CMAKE_BUILD_DIR }} --target format-check
    
    # Step 4: Run static analysis with clang-tidy
    - name: Run Lint Check
      id: lint
      continue-on-error: true
      run: cmake --build ${{ env.CMAKE_BUILD_DIR }} --target lint-check

    # Step 5: Analyze lint results using CMake target
    - name: Analyze Lint Results
      run: |
        cat ${{ env.CMAKE_BUILD_DIR }}/lint-reports/report.txt
        cmake --build ${{ env.CMAKE_BUILD_DIR }} --target lint-analyze
    
  # Build the project on both platforms
  build:
    name: Build-${{ matrix.os }}
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Don't cancel other platforms if one fails
      matrix:
        os: [windows-latest] #, macos-latest]  # Macos is to costly for private builds
        include:
          # Windows-specific settings
          - os: windows-latest
            #artifact_name: Palantir-Windows
            #artifact_path: build/Release/Palantir.exe
          # macOS-specific settings
          #- os: macos-latest
            #artifact_name: Palantir-macOS
            #artifact_path: build/Palantir.app
            #use_quality_build: true
    
    steps:
    # Step 1: Check out the repository code
    - uses: actions/checkout@v4
    
    # Restore CMake configuration from cache
    - name: Restore CMake cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.CMAKE_BUILD_DIR }}
          ${{ env.CMAKE_BUILD_DIR }}/CMakeCache.txt
          ${{ env.CMAKE_BUILD_DIR }}/CMakeFiles
        key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: ${{ runner.os }}-cmake-
    
    # Step 3: Build the project
    - name: Build
      env:
        GITHUB_TOKEN: ${{ secrets.PALANTIR_GHA }}
      run: cmake --build ${{ env.CMAKE_BUILD_DIR }} --config Release
    