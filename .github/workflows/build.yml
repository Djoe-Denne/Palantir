# Main workflow for building and checking code quality
name: Build

# Trigger the workflow on push and pull request events for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

# Add required permissions
permissions:
  contents: read
  pull-requests: write
  issues: write

# Prevent multiple workflows from running simultaneously on the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global environment variables
env:
  FORCE_COLOR: 1  # Enable colored output in logs
  TERM: xterm-256color  # Terminal type for better formatting
  CMAKE_BUILD_DIR: ${{ github.workspace }}/build
  CACHE_KEY_PREFIX: v1  # Increment this to invalidate all caches

jobs:
  setup:
    name: Setup
    if: 
    runs-on: windows-latest
    outputs:
      changed_files: ${{ steps.cmake-setup.outputs.changed_files }}
    steps:
      - uses: actions/checkout@v4
      - id: cmake-setup
        uses: ./.github/workflows/actions/setup-cmake
        with:
          github-token: ${{ secrets.PALANTIR_GHA }}
          cache-prefix: ${{ env.CACHE_KEY_PREFIX }}
          build-dir: ${{ env.CMAKE_BUILD_DIR }}

  # Code quality checks (formatting and linting) - macOS only
  code-quality:
    name: Code Quality
    needs: [setup]
    # if trigger is an issue_comment with /quality, then run code quality checks
    if: github.event_name == 'issue_comment' && github.event.comment.body == '/quality'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/code-quality
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-dir: ${{ env.CMAKE_BUILD_DIR }}
          cache-prefix: ${{ env.CACHE_KEY_PREFIX }}

  # Build the project on both platforms
  build:
    name: Build-${{ matrix.os }}
    needs: [setup]
    if: always()  # Build should run regardless of code-quality status
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Don't cancel other platforms if one fails
      matrix:
        os: [windows-latest] #, macos-latest]  # Macos is to costly for private builds
        include:
          # Windows-specific settings
          - os: windows-latest
            #artifact_name: Palantir-Windows
            #artifact_path: build/Release/Palantir.exe
          # macOS-specific settings
          #- os: macos-latest
            #artifact_name: Palantir-macOS
            #artifact_path: build/Palantir.app
            #use_quality_build: true
    
    steps:
    # Step 1: Check out the repository code
    - uses: actions/checkout@v4
    
    # Restore CMake configuration from cache
    - name: Restore CMake cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.CMAKE_BUILD_DIR }}
          ${{ env.CMAKE_BUILD_DIR }}/CMakeCache.txt
          ${{ env.CMAKE_BUILD_DIR }}/CMakeFiles
          ${{ env.CMAKE_BUILD_DIR }}/_deps
        key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}-${{ github.run_id }} 
        restore-keys: |
          ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-cmake-
    
    # Step 3: Build the project
    - name: Build
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.PALANTIR_GHA }}
      run: |
        Write-Output "Build dir: ${{ env.CMAKE_BUILD_DIR }}"
        Get-ChildItem -Path ${{ env.CMAKE_BUILD_DIR }} -Recurse
        cmake --build ${{ env.CMAKE_BUILD_DIR }} --target package
    