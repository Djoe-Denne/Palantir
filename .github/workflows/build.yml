# Main workflow for building and checking code quality
name: Build

# Trigger the workflow on push and pull request events for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

# Add required permissions
permissions:
  contents: read
  pull-requests: write
  issues: write

# Prevent multiple workflows from running simultaneously on the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global environment variables
env:
  FORCE_COLOR: 1  # Enable colored output in logs
  TERM: xterm-256color  # Terminal type for better formatting
  CMAKE_BUILD_DIR: ${{ github.workspace }}/build
  CACHE_KEY_PREFIX: v1  # Increment this to invalidate all caches

jobs:
  # Check if we should run code quality checks based on the comment
  check-trigger:
    runs-on: windows-latest
    outputs:
      should_run_quality: ${{ steps.trigger-check.outputs.should_run_quality }}
      should_run_setup: ${{ steps.trigger-check.outputs.should_run_setup }}
      pr_number: ${{ steps.trigger-check.outputs.pr_number }}
      cache_valid: ${{ steps.check-cache.outputs.cache_valid }}
      cache_status: ${{ steps.check-cache.outputs.cache_status }}
      cache_restored: ${{ steps.restore-cache.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4
      
      # Try to restore cache first
      - name: Restore CMake cache
        id: restore-cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.CMAKE_BUILD_DIR }}
            ${{ env.CMAKE_BUILD_DIR }}/CMakeCache.txt
            ${{ env.CMAKE_BUILD_DIR }}/CMakeFiles
            ${{ env.CMAKE_BUILD_DIR }}/_deps
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-cmake-
      
      # Now check cache status after restore attempt
      - name: Check CMake cache status
        id: check-cache
        shell: pwsh
        run: |
          $cachePath = "${{ env.CMAKE_BUILD_DIR }}"
          $cacheValid = "false"
          $status = "Cache not found"
          
          Write-Host "Checking cache at: $cachePath"
          Write-Host "Cache restore attempt: ${{ steps.restore-cache.outputs.cache-hit }}"
          
          if (Test-Path $cachePath) {
            $cacheAge = (Get-Date) - (Get-Item $cachePath).LastWriteTime
            $ageHours = [math]::Round($cacheAge.TotalHours, 2)
            $status = "Cache found, age: $ageHours hours"
            
            if ($cacheAge.TotalHours -lt 12) {
              $cacheValid = "true"
              $status = "$status (Valid)"
            } else {
              $status = "$status (Expired)"
            }
          }
          
          Write-Host "Cache status: $status"
          Write-Host "Cache valid: $cacheValid"
          
          echo "cache_valid=$cacheValid" >> $env:GITHUB_OUTPUT
          echo "cache_status=$status" >> $env:GITHUB_OUTPUT
          
      - id: trigger-check
        uses: ./.github/workflows/actions/check-triggers

      - name: Log trigger status
        shell: pwsh
        run: |
          Write-Host "Trigger Status Summary:"
          Write-Host "======================="
          Write-Host "Event type: ${{ github.event_name }}"
          Write-Host "Cache restore: ${{ steps.restore-cache.outputs.cache-hit }}"
          Write-Host "Cache status: ${{ steps.check-cache.outputs.cache_status }}"
          Write-Host "Should run setup: ${{ steps.trigger-check.outputs.should_run_setup }}"
          Write-Host "Should run quality: ${{ steps.trigger-check.outputs.should_run_quality }}"
          Write-Host "PR number: ${{ steps.trigger-check.outputs.pr_number }}"

  setup:
    name: Setup
    needs: check-trigger
    if: |
      needs.check-trigger.outputs.should_run_setup == 'true' ||
      needs.check-trigger.outputs.cache_valid != 'true' ||
      needs.check-trigger.outputs.cache_restored != 'true'
    runs-on: windows-latest
    outputs:
      changed_files: ${{ steps.cmake-setup.outputs.changed_files }}
    steps:
      - name: Log setup triggers
        shell: pwsh
        run: |
          Write-Host "Setup Job Trigger Analysis:"
          Write-Host "=========================="
          Write-Host "Cache status: ${{ needs.check-trigger.outputs.cache_status }}"
          Write-Host "Cache valid: ${{ needs.check-trigger.outputs.cache_valid }}"
          Write-Host "Cache restored: ${{ needs.check-trigger.outputs.cache_restored }}"
          Write-Host "Should run setup: ${{ needs.check-trigger.outputs.should_run_setup }}"
          Write-Host "Trigger condition 1 (should_run_setup): ${{ needs.check-trigger.outputs.should_run_setup == 'true' }}"
          Write-Host "Trigger condition 2 (cache_valid): ${{ needs.check-trigger.outputs.cache_valid != 'true' }}"
          Write-Host "Trigger condition 3 (cache_restored): ${{ needs.check-trigger.outputs.cache_restored != 'true' }}"
          
      - uses: actions/checkout@v4
      - id: cmake-setup
        uses: ./.github/workflows/actions/setup-cmake
        with:
          github-token: ${{ secrets.PALANTIR_GHA }}
          pr-number: ${{ needs.check-trigger.outputs.pr_number }}
          cache-prefix: ${{ env.CACHE_KEY_PREFIX }}
          build-dir: ${{ env.CMAKE_BUILD_DIR }}

  # Code quality checks (formatting and linting) - macOS only
  code-quality:
    name: Code Quality
    needs: [check-trigger, setup]
    if: needs.check-trigger.outputs.should_run_quality == 'true'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/code-quality
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          pr-number: ${{ needs.check-trigger.outputs.pr_number }}
          build-dir: ${{ env.CMAKE_BUILD_DIR }}
          cache-prefix: ${{ env.CACHE_KEY_PREFIX }}

  # Build the project on both platforms
  build:
    name: Build-${{ matrix.os }}
    needs: [check-trigger, setup]
    if: always()  # Build should run regardless of code-quality status
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Don't cancel other platforms if one fails
      matrix:
        os: [windows-latest] #, macos-latest]  # Macos is to costly for private builds
        include:
          # Windows-specific settings
          - os: windows-latest
            #artifact_name: Palantir-Windows
            #artifact_path: build/Release/Palantir.exe
          # macOS-specific settings
          #- os: macos-latest
            #artifact_name: Palantir-macOS
            #artifact_path: build/Palantir.app
            #use_quality_build: true
    
    steps:
    # Step 1: Check out the repository code
    - uses: actions/checkout@v4
    
    # Restore CMake configuration from cache
    - name: Restore CMake cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.CMAKE_BUILD_DIR }}
          ${{ env.CMAKE_BUILD_DIR }}/CMakeCache.txt
          ${{ env.CMAKE_BUILD_DIR }}/CMakeFiles
          ${{ env.CMAKE_BUILD_DIR }}/_deps
        key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: |
          ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-cmake-
    
    # Step 3: Build the project
    - name: Build
      env:
        GITHUB_TOKEN: ${{ secrets.PALANTIR_GHA }}
      run: cmake --build ${{ env.CMAKE_BUILD_DIR }} --config Release
    