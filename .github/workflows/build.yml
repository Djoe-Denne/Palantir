# Main workflow for building and checking code quality
name: Code Quality

on:
  # Run on push to master and when PRs are merged to master
  push:
    branches:
      - master
  # Run on PRs targeting master
  pull_request:
    branches:
      - master
    types: [opened, synchronize, reopened]
  # Run when a comment is added to a PR
  issue_comment:
    types: [created]

# Add required permissions
permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global environment variables
env:
  FORCE_COLOR: 1  # Enable colored output in logs
  TERM: xterm-256color  # Terminal type for better formatting
  CMAKE_BUILD_DIR: ${{ github.workspace }}/build
  CACHE_KEY_PREFIX: v1  # Increment this to invalidate all caches

jobs:
  # Check if the comment trigger should run the workflow
  check-pr-comment:
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check-comment.outputs.should_run }}
    steps:
      - name: Check if comment matches trigger pattern
        id: check-comment
        shell: bash
        run: |
          if [[ "${{ github.event.comment.body }}" == "/run-quality-check" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  code-quality:
    needs: check-pr-comment
    if: >-
      github.event_name == 'push' || 
      github.event_name == 'pull_request' || 
      (github.event_name == 'issue_comment' && needs.check-pr-comment.outputs.should_run == 'true')
    runs-on: windows-latest
    steps:
      - name: Checkout PR branch for comment events
        if: github.event_name == 'issue_comment'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Checkout for push/PR events
        if: github.event_name != 'issue_comment'
        uses: actions/checkout@v4

      - name: Restore CMake cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ${{ env.CMAKE_BUILD_DIR }}
            ${{ env.CMAKE_BUILD_DIR }}/CMakeCache.txt
            ${{ env.CMAKE_BUILD_DIR }}/CMakeFiles
            ${{ env.CMAKE_BUILD_DIR }}/_deps
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-cmake-

      - name: Configure CMake
        shell: pwsh
        run: |
          cmake -B ${{ env.CMAKE_BUILD_DIR }} -DCMAKE_BUILD_TYPE=Release -DGITHUB_TOKEN=${{ secrets.PALANTIR_GHA }}

      - name: Check Format
        shell: pwsh
        run: cmake --build ${{ env.CMAKE_BUILD_DIR }} --target format-check

      - name: Run Lint Check
        shell: pwsh
        run: cmake --build ${{ env.CMAKE_BUILD_DIR }} --target lint-check

      - name: Analyze Lint Results
        shell: pwsh
        run: |
          cat ${{ env.CMAKE_BUILD_DIR }}/lint-reports/report.txt
          cmake --build ${{ env.CMAKE_BUILD_DIR }} --target lint-analyze