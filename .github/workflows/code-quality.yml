# Main workflow for building and checking code quality
name: Code Quality

# Trigger the workflow on push and pull request events for the master branch
on:
  push:
    branches: [ master ]
  issue_comment:
    types: [created]

# Add required permissions
permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global environment variables
env:
  FORCE_COLOR: 1  # Enable colored output in logs
  TERM: xterm-256color  # Terminal type for better formatting
  CMAKE_BUILD_DIR: ${{ github.workspace }}/build
  CACHE_KEY_PREFIX: v1  # Increment this to invalidate all caches

jobs:
  code-quality:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
    
      - name: Restore CMake cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ${{ env.CMAKE_BUILD_DIR }}
            ${{ env.CMAKE_BUILD_DIR }}/CMakeCache.txt
            ${{ env.CMAKE_BUILD_DIR }}/CMakeFiles
            ${{ env.CMAKE_BUILD_DIR }}/_deps
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-cmake-


      - name: Get changed files
        id: changed-files
        if: github.event_name == 'pull_request' || github.event_name == 'issue_comment'
        shell: bash
        run: |
          CHANGED_FILES=$(git diff --name-only origin/master...HEAD | grep -E '\.(cpp|hpp|h|cc)$' | tr '\n' ';' || echo "")
          echo "files=${CHANGED_FILES}" >> $GITHUB_OUTPUT
          echo "Changed files: ${CHANGED_FILES}"
      
      - name: Configure CMake
        if: github.event_name == 'pull_request' || github.event_name == 'issue_comment'
        shell: pwsh
        run: |
          cmake -B ${{ env.CMAKE_BUILD_DIR }} -DCMAKE_BUILD_TYPE=Release -DGITHUB_TOKEN=${{ secrets.PALANTIR_GHA }} -DLINT_FILES="${{ steps.changed-files.outputs.files }}"

      - name: Configure CMake
        if: github.event_name == 'push'
        shell: pwsh
        run: |
          cmake -B ${{ env.CMAKE_BUILD_DIR }} -DCMAKE_BUILD_TYPE=Release -DGITHUB_TOKEN=${{ secrets.PALANTIR_GHA }}

      - name: Check Format
        shell: pwsh
        run: cmake --build ${{ env.CMAKE_BUILD_DIR }} --target format-check
      
      - name: Run Lint Check
        shell: pwsh
        run: cmake --build ${{ env.CMAKE_BUILD_DIR }} --target lint-check

      - name: Analyze Lint Results
        shell: pwsh
        run: |
          cat ${{ env.CMAKE_BUILD_DIR }}/lint-reports/report.txt
          cmake --build ${{ env.CMAKE_BUILD_DIR }} --target lint-analyze
      