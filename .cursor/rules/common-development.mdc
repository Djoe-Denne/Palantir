---
description: 
globs: 
---

# Common Development Rules

## Documentation Awareness
Must read all `.md` files under the `docs/` directory before answering any request.
Must update or create new doc

## Code Architecture Guidelines
- **Window or WebView Interactions**: Must be placed in the `application` directory.
- **Base Logic**: Must be implemented in the `palantir-core`.
- **Command Definitions**: Must be located in the `plugin-command`.

## Cross-Platform Code Rules
- Avoid `#ifdef` usage in `.cpp` files. It is tolerated in `.hpp` files for conditional declarations.
- Place platform-specific method implementations under:
  ```
  src/platform/{platform}/{namespace-path}/{class-name}.cpp
  ```

## Code Quality and Formatting
- All code must be documented and lint-free.
- Follow these coding standards:
  - Use trailing return types.
  - Concatenate namespaces when possible.
  - Implement constructors according to `hicpp-special-member-functions`.

## PIMPL Pattern for New Classes in `palantir-core`
- New classes must be prefixed with `PALANTIR_CORE_API`.
- Use the PIMPL pattern for encapsulation:
  ```cpp
  #pragma warning(push)
  #pragma warning(disable: 4251)
      std::unique_ptr<CommandFactoryImpl> pimpl_;
  #pragma warning(pop)
  ```

## Singleton Preference
Prefer using singletons over abstract classes with static methods.

## Objective-C++ Placement
All Objective-C++ code must reside under:
```
{include,src}/platform/macos/**
```

## CMake Declarations for New Files
Declare all new `.cpp` or `.mm` files in:
```
- cmake/common-source.cmake
- cmake/platform/{platform}.cmake
- plugin-loader/CMakeLists.cmake
- plugins/CMakeLists.txt
```

## Functional Tag Execution
When `[functional]` tag is detected:
1. Configure and build until functional.
2. Format code using CMake:
   ```
   cmake --build build --target format
   ```
3. Lint the code:
   ```
   cmake --build build --target lint
   ```
   Ignore errors but fix all warnings.
